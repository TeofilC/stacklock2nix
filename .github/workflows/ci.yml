name: CI

# Trigger the workflow on push or pull request, but only for the master branch
on:
  pull_request:
  push:
    branches: [main]

jobs:
  nix:
    name: nix / ubuntu-latest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: cachix/install-nix-action@v18
        with:
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Check that easy project and advanced project are locked to same Nixpkgs
        run: |
          are_same=$(nix eval --impure --expr 'let easy-rev = (builtins.fromJSON (builtins.readFile ./my-example-haskell-lib-easy/flake.lock)).nodes.nixpkgs.locked.rev; advanced-rev = (builtins.fromJSON (builtins.readFile ./my-example-haskell-lib-advanced/flake.lock)).nodes.nixpkgs.locked.rev; in easy-rev == advanced-rev')
          if [ "$are_same" != "true" ]; then
            echo "ERROR: The ./my-example-haskell-lib-easy/flake.lock and ./my-example-haskell-lib-advanced/flake.lock files are locked to different versions of Nixpkgs"
          fi

      - name: Update flake stacklock2nix input
        run: |
          sed -i -e 's|^  inputs.stacklock2nix.url = |  inputs.stacklock2nix.url = "path:'"$(realpath ..)"'";|' ./flake.nix
        working-directory: "./my-example-haskell-lib-easy/"

      - name: Build Easy Example with Nix
        run: nix build
        working-directory: "./my-example-haskell-lib-easy/"

      - name: Build Easy Example with Nix
        run: nix build
        working-directory: "./my-example-haskell-lib-easy/"

      - name: Build Easy Example with Cabal
        run: "nix develop --command 'cabal build all'"
        working-directory: "./my-example-haskell-lib-easy/"

      - name: Test Easy Example with Cabal
        run: "nix develop --command 'cabal test all'"
        working-directory: "./my-example-haskell-lib-easy/"

      - name: Build Advanced Example with Nix
        run: nix build
        working-directory: "./my-example-haskell-lib-advanced/"

      - name: Build Easy Example with Cabal
        run: "nix develop --command 'cabal build all'"
        working-directory: "./my-example-haskell-lib-advanced/"

      - name: Test Easy Example with Cabal
        run: "nix develop --command 'cabal test all'"
        working-directory: "./my-example-haskell-lib-advanced/"
